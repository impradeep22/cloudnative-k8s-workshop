<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>3. Deploy an Application on KCD Cloud Native</title><link>https://kcdchennai.github.io/cloud-native-k8s-workshop/050_deploy_app.html</link><description>Recent content in 3. Deploy an Application on KCD Cloud Native</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://kcdchennai.github.io/cloud-native-k8s-workshop/050_deploy_app/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Create Docker Image</title><link>https://kcdchennai.github.io/cloud-native-k8s-workshop/050_deploy_app/50_create_image.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloud-native-k8s-workshop/050_deploy_app/50_create_image.html</guid><description> Create Docker Image For deployment, we’ll package our application within a container. Kubernetes supports many different container engines, here we’ll use Docker (which is widely used).
The Dockerfile used instructs docker how to build images step by step.
➡️ Fetch application source
git clone https://github.com/karthick-kk/netflix-clone ➡️ Build Image
cd netflix-clone docker build -t netflix-clone:1.0 . ➡️ Push the Image to Docker Registry
docker tag netflix-clone:1.0 devregistry:30500/netflix-clone:latest docker push devregistry:30500/netflix-clone:latest</description></item><item><title>2. Create Deployment</title><link>https://kcdchennai.github.io/cloud-native-k8s-workshop/050_deploy_app/54_create_k8s_deployment.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloud-native-k8s-workshop/050_deploy_app/54_create_k8s_deployment.html</guid><description> Create a Kubernetes Deployment We create a deployment due to the application being stateless. For applications that persists data, a statefulset is preferred to store the data across all the nodes.
➡️ Create a Kubernetes Deployment from manifests
kubectl apply -f manifests ➡️ Verify the deployment and service
kubectl get deployment netflix-clone kubectl get service netflix-clone-service</description></item><item><title>3. Create Ingress for External Access</title><link>https://kcdchennai.github.io/cloud-native-k8s-workshop/050_deploy_app/55_create_ingress.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloud-native-k8s-workshop/050_deploy_app/55_create_ingress.html</guid><description>Create Ingress for External Access The deployment we created will not be accessible from outside the cluster, unless we use a NodePort service or LoadBalancer or Ingress route. We will create an Ingress object to access the application through a fake DNS
➡️ Add a fake DNS entry
LBIP=$(kubectl describe svc ingress-nginx-controller -n ingress-nginx|grep &amp;#34;Ingress:&amp;#34;|awk &amp;#39;{print $NF}&amp;#39;) echo &amp;#34;$LBIP netflix-clone.kcdchennai.in&amp;#34; | sudo tee -a /etc/hosts ➡️ Create an Ingress</description></item><item><title>Conclusion</title><link>https://kcdchennai.github.io/cloud-native-k8s-workshop/050_deploy_app/56_conclusion.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloud-native-k8s-workshop/050_deploy_app/56_conclusion.html</guid><description>Cheers! We got our first application going live in the cluster that we created. Kindly refer to the KCNA page for further learning and certification in this space.</description></item></channel></rss>
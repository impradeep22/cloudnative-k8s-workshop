<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloud Native with Kubernetes on KCD Cloud Native</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/</link><description>Recent content in Cloud Native with Kubernetes on KCD Cloud Native</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://kcdchennai.github.io/cloudnative-k8s-workshop/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Install K3D</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/030_create_cluster/30_install_k3d.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/030_create_cluster/30_install_k3d.html</guid><description>Install K3D k3d is a lightweight wrapper to run k3s (Rancher Lab’s minimal Kubernetes distribution) in docker.
k3d makes it very easy to create single- and multi-node k3s clusters in docker, e.g. for local development on Kubernetes.
➡️ Install K3D
wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash ➡️ Validate K3D Installation
k3d version Let&amp;rsquo;s move to the next section</description></item><item><title>1. Install WSL and Linux</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/020_setup_prerequisites/20_setup_wsl.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/020_setup_prerequisites/20_setup_wsl.html</guid><description>Windows Subsystem for Linux (WSL) You must be running Windows 10 version 2004 and higher (Build 19041 and higher) or Windows 11. We highly recommend you to go to the WSL Installation to get started with WSL environment.
The Windows Subsystem for Linux lets developers run a GNU/Linux environment directly on Windows, unmodified, without the overhead of a traditional virtual machine or dualboot setup.
Install Windows Subsytem for Linux (WSL) ➡️ Powershell/CMD</description></item><item><title>1. Create Docker Image</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/050_deploy_app/50_create_image.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/050_deploy_app/50_create_image.html</guid><description> Create Docker Image For deployment, we’ll package our application within a container. Kubernetes supports many different container engines, here we’ll use Docker (which is widely used).
The Dockerfile used instructs docker how to build images step by step.
➡️ Fetch application source
git clone https://github.com/karthick-kk/netflix-clone ➡️ Build Image
cd netflix-clone docker build -t netflix-clone:1.0 . ➡️ Push the Image to Docker Registry
docker tag netflix-clone:1.0 devregistry:30500/netflix-clone:latest docker push devregistry:30500/netflix-clone:latest</description></item><item><title>1. Monitoring using Prometheus Stack</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/060_logging_metrics/60_prometheus_stack_monitoring.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/060_logging_metrics/60_prometheus_stack_monitoring.html</guid><description>Monitoring Using Prometheus Stack Prometheus collects and stores its metrics as time series data, i.e. metrics information is stored with the timestamp at which it was recorded, alongside optional key-value pairs called labels.
Prometheus scrapes metrics from instrumented jobs, either directly or via an intermediary push gateway for short-lived jobs. It stores all scraped samples locally and runs rules over this data to either aggregate and record new time series from existing data or generate alerts.</description></item><item><title>2. Install Docker</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/020_setup_prerequisites/21_install_docker.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/020_setup_prerequisites/21_install_docker.html</guid><description>Install Docker Although Docker is not needed as a container runtime in Kubernetes, it still has a role to play in the Kubernetes ecosystem, and in your workflow. Docker is still going strong as a tool for developing and building container images, as well as running them locally.
➡️ Install docker via package manager
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install docker.io -y ➡️ Add docker daemon to startup</description></item><item><title>2. Logging using Elastic Stack</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/060_logging_metrics/62_elastic_stack_logging.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/060_logging_metrics/62_elastic_stack_logging.html</guid><description>Logging Using Elastic Stack &amp;ldquo;ELK&amp;rdquo; is the acronym for three open source projects: Elasticsearch, Logstash, and Kibana. Elasticsearch is a search and analytics engine. Logstash is a server‑side data processing pipeline that ingests data from multiple sources simultaneously, transforms it, and then sends it to a &amp;ldquo;stash&amp;rdquo; like Elasticsearch. Kibana lets users visualize data with charts and graphs in Elasticsearch.
The Elastic Stack is the next evolution of the ELK Stack.</description></item><item><title>3. Install Google Chrome</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/020_setup_prerequisites/22_install_chrome.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/020_setup_prerequisites/22_install_chrome.html</guid><description> Install Google Chrome Chrome is available for Linux and this page shows you where to download it from and how to install it. It is essential to have a graphical browser installed for web development.
➡️ Download Chrome
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb ➡️ Install Chrome
sudo apt install ./google-chrome-stable_current_amd64.deb -y</description></item><item><title>4. Install GWSL</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/020_setup_prerequisites/23_install_gwsl.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/020_setup_prerequisites/23_install_gwsl.html</guid><description>Install GWSL GWSL is an XServer that lets you easily run graphical Linux apps on Windows 10. GWSL stands for Graphical WSL.
➡️ Download and Install GWSL
Github Source
Allow any firewall alert popups to allow the traffic between host and WSL
➡️ Configure Remote Display (Auto)
Open GWSL -&amp;gt; GWSL Distro Tools -&amp;gt; Configure Ubuntu 20.02 -&amp;gt; Auto-Export Display/Audio
Skip below section, if GWSL has been already configured using previous method.</description></item><item><title>2. Create Deployment</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/050_deploy_app/54_create_k8s_deployment.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/050_deploy_app/54_create_k8s_deployment.html</guid><description> Create a Kubernetes Deployment We create a deployment due to the application being stateless. For applications that persists data, a statefulset is preferred to store the data across all the nodes.
➡️ Create a Kubernetes Deployment from manifests
kubectl apply -f manifests ➡️ Verify the deployment and service
kubectl get deployment netflix-clone kubectl get service netflix-clone-service</description></item><item><title>2. Create Kubernetes Cluster</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/030_create_cluster/32_create_cluster.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/030_create_cluster/32_create_cluster.html</guid><description>Setup your first Kubernetes Cluster using K3D ➡️ 1. Create Kubernetes Cluster
Create a cluster named devcluster with just a single master node and 3 worker nodes. We will disable the auto creation of load balancer service and inbuilt traefik ingress controller. A registry node named devregistry will also be created as part of the cluster creation.
Additionally, we will add up a third party Load Balancer(MetalLB) and Nginx Ingress Controller to the cluster to simulate and access like a realtime kubernetes environment.</description></item><item><title>3. Create Ingress for External Access</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/050_deploy_app/55_create_ingress.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/050_deploy_app/55_create_ingress.html</guid><description>Create Ingress for External Access The deployment we created will not be accessible from outside the cluster, unless we use a NodePort service or LoadBalancer or Ingress route. We will create an Ingress object to access the application through a fake DNS
➡️ Add a fake DNS entry
LBIP=$(kubectl describe svc ingress-nginx-controller -n ingress-nginx|grep &amp;#34;Ingress:&amp;#34;|awk &amp;#39;{print $NF}&amp;#39;) echo &amp;#34;$LBIP netflix-clone.kcdchennai.in&amp;#34; | sudo tee -a /etc/hosts ➡️ Create an Ingress</description></item><item><title>Conclusion</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/050_deploy_app/56_conclusion.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/050_deploy_app/56_conclusion.html</guid><description>Cheers! We got our first application going live in the cluster that we created.</description></item><item><title>Conclusion</title><link>https://kcdchennai.github.io/cloudnative-k8s-workshop/060_logging_metrics/66_conclusion.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kcdchennai.github.io/cloudnative-k8s-workshop/060_logging_metrics/66_conclusion.html</guid><description>Kindly refer to the KCNA page for further learning and certification in this space.</description></item></channel></rss>